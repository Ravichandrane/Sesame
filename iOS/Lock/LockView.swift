//
// LockView.swift
// Generated by Core Animator version 1.1 on 09/06/2015.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class LockView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 200, height: 200))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:200, height:200)
		__scaling__.center = CGPoint(x:100.0, y:100.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let oval1 = UIImageView()
		oval1.bounds = CGRect(x:0, y:0, width:214.0, height:214.0)
		var imgOval1: UIImage!
		if let imagePath = bundle.pathForResource("Oval 1.png", ofType:nil) {
			imgOval1 = UIImage(contentsOfFile:imagePath)
		}
		oval1.image = imgOval1
		oval1.contentMode = .Center;
		oval1.layer.position = CGPoint(x:98.516, y:99.961)
		__scaling__.addSubview(oval1)
		viewsByName["Oval 1"] = oval1

		let oval2 = UIImageView()
		oval2.bounds = CGRect(x:0, y:0, width:214.0, height:214.0)
		var imgOval2: UIImage!
		if let imagePath = bundle.pathForResource("Oval 2.png", ofType:nil) {
			imgOval2 = UIImage(contentsOfFile:imagePath)
		}
		oval2.image = imgOval2
		oval2.contentMode = .Center;
		oval2.layer.position = CGPoint(x:98.516, y:99.961)
		oval2.alpha = 0.00
		__scaling__.addSubview(oval2)
		viewsByName["Oval 2"] = oval2

		let cadenas = UIView()
		cadenas.bounds = CGRect(x:0, y:0, width:58.8, height:81.3)
		cadenas.layer.position = CGPoint(x:98.516, y:104.149)
		__scaling__.addSubview(cadenas)
		viewsByName["Cadenas"] = cadenas

		let shape = UIImageView()
		shape.bounds = CGRect(x:0, y:0, width:126.0, height:111.0)
		var imgShape: UIImage!
		if let imagePath = bundle.pathForResource("Shape.png", ofType:nil) {
			imgShape = UIImage(contentsOfFile:imagePath)
		}
		shape.image = imgShape
		shape.contentMode = .Center;
		shape.layer.position = CGPoint(x:29.408, y:55.346)
		shape.transform = CGAffineTransformMakeScale(0.47, 0.47)
		cadenas.addSubview(shape)
		viewsByName["Shape"] = shape

		let shape2 = UIImageView()
		shape2.bounds = CGRect(x:0, y:0, width:96.0, height:78.0)
		shape2.layer.anchorPoint = CGPoint(x:1.005, y:0.998)
		var imgShape2: UIImage!
		if let imagePath = bundle.pathForResource("Shape2.png", ofType:nil) {
			imgShape2 = UIImage(contentsOfFile:imagePath)
		}
		shape2.image = imgShape2
		shape2.contentMode = .Center;
		shape2.layer.position = CGPoint(x:52.039, y:36.379)
		shape2.transform = CGAffineTransformMakeScale(0.47, 0.47)
		cadenas.addSubview(shape2)
		viewsByName["Shape2"] = shape2

		self.viewsByName = viewsByName
	}

	// - MARK: close

	func addCloseAnimation() {
		addCloseAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addCloseAnimation(completion: ((Bool) -> Void)?) {
		addCloseAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addCloseAnimation(#removedOnCompletion: Bool) {
		addCloseAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addCloseAnimation(#removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addCloseAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addCloseAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.400
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Close")
			self.animationCompletions[layer.animationForKey("Close")] = complete
		}

		let shape2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shape2RotationAnimation.duration = 0.400
		shape2RotationAnimation.values = [0.698 as Float, 0.000 as Float]
		shape2RotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shape2RotationAnimation.timingFunctions = [anticOverTiming]
		shape2RotationAnimation.beginTime = beginTime
		shape2RotationAnimation.fillMode = fillMode
		shape2RotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Shape2"]?.layer.addAnimation(shape2RotationAnimation, forKey:"close_Rotation")

		let oval2OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		oval2OpacityAnimation.duration = 0.400
		oval2OpacityAnimation.values = [1.000 as Float, 0.000 as Float, 0.000 as Float]
		oval2OpacityAnimation.keyTimes = [0.000 as Float, 0.750 as Float, 1.000 as Float]
		oval2OpacityAnimation.timingFunctions = [anticOverTiming, linearTiming]
		oval2OpacityAnimation.beginTime = beginTime
		oval2OpacityAnimation.fillMode = fillMode
		oval2OpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Oval 2"]?.layer.addAnimation(oval2OpacityAnimation, forKey:"close_Opacity")

		let cadenasScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		cadenasScaleXAnimation.duration = 0.400
		cadenasScaleXAnimation.values = [1.100 as Float, 1.000 as Float]
		cadenasScaleXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		cadenasScaleXAnimation.timingFunctions = [anticOverTiming]
		cadenasScaleXAnimation.beginTime = beginTime
		cadenasScaleXAnimation.fillMode = fillMode
		cadenasScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Cadenas"]?.layer.addAnimation(cadenasScaleXAnimation, forKey:"close_ScaleX")

		let cadenasScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		cadenasScaleYAnimation.duration = 0.400
		cadenasScaleYAnimation.values = [1.100 as Float, 1.000 as Float]
		cadenasScaleYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		cadenasScaleYAnimation.timingFunctions = [anticOverTiming]
		cadenasScaleYAnimation.beginTime = beginTime
		cadenasScaleYAnimation.fillMode = fillMode
		cadenasScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Cadenas"]?.layer.addAnimation(cadenasScaleYAnimation, forKey:"close_ScaleY")
	}

	func removeCloseAnimation() {
		self.layer.removeAnimationForKey("Close")
		self.viewsByName["Shape2"]?.layer.removeAnimationForKey("close_Rotation")
		self.viewsByName["Oval 2"]?.layer.removeAnimationForKey("close_Opacity")
		self.viewsByName["Cadenas"]?.layer.removeAnimationForKey("close_ScaleX")
		self.viewsByName["Cadenas"]?.layer.removeAnimationForKey("close_ScaleY")
	}

	// - MARK: open

	func addOpenAnimation() {
		addOpenAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addOpenAnimation(completion: ((Bool) -> Void)?) {
		addOpenAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addOpenAnimation(#removedOnCompletion: Bool) {
		addOpenAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addOpenAnimation(#removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addOpenAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addOpenAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.400
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Open")
			self.animationCompletions[layer.animationForKey("Open")] = complete
		}

		let shape2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shape2RotationAnimation.duration = 0.400
		shape2RotationAnimation.values = [0.000 as Float, 0.698 as Float]
		shape2RotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shape2RotationAnimation.timingFunctions = [easeInOutTiming]
		shape2RotationAnimation.beginTime = beginTime
		shape2RotationAnimation.fillMode = fillMode
		shape2RotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Shape2"]?.layer.addAnimation(shape2RotationAnimation, forKey:"open_Rotation")

		let oval2OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		oval2OpacityAnimation.duration = 0.400
		oval2OpacityAnimation.values = [0.000 as Float, 1.000 as Float, 1.000 as Float]
		oval2OpacityAnimation.keyTimes = [0.000 as Float, 0.775 as Float, 1.000 as Float]
		oval2OpacityAnimation.timingFunctions = [easeInOutTiming, linearTiming]
		oval2OpacityAnimation.beginTime = beginTime
		oval2OpacityAnimation.fillMode = fillMode
		oval2OpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Oval 2"]?.layer.addAnimation(oval2OpacityAnimation, forKey:"open_Opacity")

		let cadenasScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		cadenasScaleXAnimation.duration = 0.400
		cadenasScaleXAnimation.values = [1.000 as Float, 1.100 as Float]
		cadenasScaleXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		cadenasScaleXAnimation.timingFunctions = [anticOverTiming]
		cadenasScaleXAnimation.beginTime = beginTime
		cadenasScaleXAnimation.fillMode = fillMode
		cadenasScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Cadenas"]?.layer.addAnimation(cadenasScaleXAnimation, forKey:"open_ScaleX")

		let cadenasScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		cadenasScaleYAnimation.duration = 0.400
		cadenasScaleYAnimation.values = [1.000 as Float, 1.100 as Float]
		cadenasScaleYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		cadenasScaleYAnimation.timingFunctions = [anticOverTiming]
		cadenasScaleYAnimation.beginTime = beginTime
		cadenasScaleYAnimation.fillMode = fillMode
		cadenasScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Cadenas"]?.layer.addAnimation(cadenasScaleYAnimation, forKey:"open_ScaleY")
	}

	func removeOpenAnimation() {
		self.layer.removeAnimationForKey("Open")
		self.viewsByName["Shape2"]?.layer.removeAnimationForKey("open_Rotation")
		self.viewsByName["Oval 2"]?.layer.removeAnimationForKey("open_Opacity")
		self.viewsByName["Cadenas"]?.layer.removeAnimationForKey("open_ScaleX")
		self.viewsByName["Cadenas"]?.layer.removeAnimationForKey("open_ScaleY")
	}

	override func animationDidStop(anim: CAAnimation!, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("Close")
		self.layer.removeAnimationForKey("Open")
	}
}